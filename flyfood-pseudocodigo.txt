# Assuma que tudo que está escrito na linha após o símbolo "#" é um comentário explicando o que está acontecendo

função ler matriz:
    matriz = [] # lista vazia

    número de linhas e número de colunas = primeira entrada
    para cada entrada no intervalo [1, número de linhas]: # estrutura de laço que irá se repetir para cada valor no intervalo acrescentando de um em um até o final do intervalo
        adicionar linha à lista matriz

    # matriz = [[segunda entrada], [terceira entrada], [quarta entrada]...]
    retorne matriz

função encontrar pontos(matriz):
    pontos = {} # dicionário vazio
    
    se número de linhas for 0: # matriz nula
        retorna pontos

    para cada inteiro i no intervalo [1, número de linhas]: 
        para cada inteiro j no intervalo [1, número de colunas]:
            se matriz[i,j] diferente de 0:
                adiciona ao dicionário a letra como chave e suas coordenadas na matriz como valor

    # pontos = {primeira letra: (i0,j0), segunda letra: (i1,j1), terceira letra: (i2,j2)...}
    retorne pontos

função distância (coordenadas primeira letra, coordenadas segunda letra):
    
    diferenca entre as linhas = coordenadas i da primeira letra - coordenadas i da segunda letra
    diferenca entre as colunas = coordenadas j da primeira letra - coordenadas j da segunda letra

    se diferenca entre as linhas < 0, então:
        diferenca absoluta de linhas = -diferenca entre as linhas
    se não, então:
        diferenca absoluta de linhas = diferenca entre as linhas

    se diferenca entre as colunas < 0, então:
        diferenca absoluta de colunas = -diferenca entre as colunas
    se não, então:
        diferenca absoluta de colunas = diferenca entre as colunas

    retorne diferenca absoluta de linhas + diferenca absoluta de colunas


função gerar permutações (lista de letras): # Recursiva

    # Caso base: se a lista tem 0 ou 1 elemento, só há uma permutação possível
    se tamanho da lista de letras for menor ou igual a 1, então:
        retorne a própria lista
    
    resultado = [] # lista vazia

    para cada inteiro i no intervalo [1, tamanho da lista de letras]:

        elemento fixo = lista de letras [i] # item de posição i na lista de letras
        resto = todos os elementos da lista antes do elemento de posição i + todos os elementos da lista depois do elemento de posição i
        # resto = lista com todos os itens da lista de letras - o item de posição i

        para cada item p na lista [chamada da função permutações(resto)] # laço que irá percorrer cada elemento da lista
            adiciona a lista resultado o item (elemento fixo + p)

    # resultado = [lista com todas as permutações possíveis das letras em lista de letras]
    retorne resultado

função fly food força bruta:
    matriz = chamada da função ler matriz()
    coordenadas = chamada da função encontrar pontos(matriz)
    
    se R não está em coordenadas, então:
        retorne "Ponto R não encontrado"
   
    origem = coordenadas de R

    pontos de entrega = [] # lista vazia
    
    para cada letra nas chaves do dicionário coordenadas: # laço que irá percorrer cada chave do dicionário
        se letra for diferente R, então:
            adicionar à lista pontos de entrega o item letra
    
    se tamanho de pontos de entrega for igual a 0, então:
        retorne nada # pois não há pontos de entrega para serem feitas

    rotas = chamada da função gerar permutacoes(pontos de entrega)
    menor custo = infinito # na prática não é infinito mas um valor extremamente alto
    melhor rota = [] # lista vazia

    para cada rota na lista rotas:
        custo atual = 0
        ponto anterior = origem
        
        para cada letra na lista rota:
            ponto atual = coordenadas da letra
            custo atual = custo atual + distância(ponto anterior, ponto atual)
            ponto_anterior = ponto_atual
        
        custo atual = custo atual + distância(ponto anterior, origem)
        
        se custo_atual for menor que menor custo, então:
            menor custo = custo atual
            melhor rota = rota

    se a lista melhor rota não estiver vazia, então:
        retorne uma string com todos os pontos em ordem da lista melhor rota
